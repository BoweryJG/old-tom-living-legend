import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  Box,\n  TextField,\n  IconButton,\n  Typography,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  Chip,\n  CircularProgress,\n  Alert,\n  Tooltip,\n  Fade,\n  Slide\n} from '@mui/material';\nimport {\n  Send,\n  Mic,\n  MicOff,\n  VolumeUp,\n  VolumeOff,\n  Psychology,\n  Lightbulb,\n  History,\n  Star\n} from '@mui/icons-material';\nimport { useAppSelector, useAppDispatch } from '@/store';\nimport {\n  processAIInteraction,\n  startSpeechRecognition,\n  stopSpeechRecognition,\n  requestPrivacyConsent,\n  setSpeechTranscript,\n  updateRecommendations,\n  addAchievement\n} from '@/store/slices/aiSlice';\nimport { askOldTomService } from '@/services/askOldTomService';\nimport { AIIntegratedCharacter } from './AIIntegratedCharacter';\n\ninterface ConversationMessage {\n  id: string;\n  type: 'user' | 'character';\n  text: string;\n  timestamp: number;\n  emotion?: string;\n  educationalContent?: {\n    topic: string;\n    learningObjectives: string[];\n    relatedTopics: string[];\n  };\n}\n\ninterface AskOldTomInterfaceProps {\n  childAge?: number;\n  maxMessages?: number;\n  showSuggestions?: boolean;\n  enableVoice?: boolean;\n  enableEmotionalAI?: boolean;\n  onLearningProgress?: (progress: any) => void;\n}\n\nexport const AskOldTomInterface: React.FC<AskOldTomInterfaceProps> = ({\n  childAge = 7,\n  maxMessages = 20,\n  showSuggestions = true,\n  enableVoice = true,\n  enableEmotionalAI = true,\n  onLearningProgress\n}) => {\n  const dispatch = useAppDispatch();\n  \n  // Local state\n  const [question, setQuestion] = useState('');\n  const [conversation, setConversation] = useState<ConversationMessage[]>([]);\n  const [isAsking, setIsAsking] = useState(false);\n  const [showWelcome, setShowWelcome] = useState(true);\n  const conversationEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  \n  // AI state\n  const aiState = useAppSelector(state => state.ai);\n  const {\n    currentInteraction,\n    speechRecognition,\n    voiceSynthesis,\n    emotionalAnalysis,\n    conversationContext,\n    privacy,\n    learning,\n    navigation\n  } = aiState;\n  \n  // Suggested questions based on age and topics\n  const [suggestedQuestions, setSuggestedQuestions] = useState<string[]>([]);\n  \n  useEffect(() => {\n    // Initialize suggested questions\n    const suggestions = askOldTomService.getAgeAppropriateTopics(childAge).map(topic => {\n      if (childAge <= 5) {\n        return `What is ${topic}?`;\n      } else if (childAge <= 8) {\n        return `Can you tell me about ${topic}?`;\n      } else {\n        return `How does ${topic} work?`;\n      }\n    }).slice(0, 6);\n    \n    setSuggestedQuestions([\n      ...suggestions,\n      \"Tell me about your friendship with George\",\n      \"What's your favorite thing about the ocean?\",\n      \"How do whales talk to each other?\"\n    ]);\n  }, [childAge]);\n  \n  // Auto-scroll to bottom of conversation\n  useEffect(() => {\n    conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [conversation]);\n  \n  // Handle speech recognition results\n  useEffect(() => {\n    if (speechRecognition.transcript && !isAsking) {\n      setQuestion(speechRecognition.transcript);\n    }\n  }, [speechRecognition.transcript, isAsking]);\n  \n  // Handle question submission\n  const handleAskQuestion = useCallback(async (questionText: string = question) => {\n    if (!questionText.trim() || isAsking) return;\n    \n    setIsAsking(true);\n    setShowWelcome(false);\n    \n    // Add user message to conversation\n    const userMessage: ConversationMessage = {\n      id: `user_${Date.now()}`,\n      type: 'user',\n      text: questionText.trim(),\n      timestamp: Date.now()\n    };\n    \n    setConversation(prev => [...prev.slice(-(maxMessages - 1)), userMessage]);\n    setQuestion('');\n    \n    try {\n      // Check privacy consent\n      if (!privacy.consentGiven) {\n        await dispatch(requestPrivacyConsent({\n          childAge,\n          requiredConsents: ['voice_processing', 'learning_tracking'],\n          parentEmail: undefined\n        })).unwrap();\n      }\n      \n      // Process with Ask Old Tom service\n      const response = await askOldTomService.askOldTom({\n        question: questionText,\n        childAge,\n        sessionId: conversationContext.sessionId,\n        context: {\n          currentEmotion: emotionalAnalysis.currentEmotion?.primary,\n          previousTopics: conversationContext.previousTopics,\n          learningLevel: learning.difficultyLevel === 'simple' ? 'beginner' : \n                        learning.difficultyLevel === 'moderate' ? 'intermediate' : 'advanced'\n        },\n        inputMethod: 'text'\n      });\n      \n      // Add Old Tom's response to conversation\n      const tomMessage: ConversationMessage = {\n        id: `tom_${Date.now()}`,\n        type: 'character',\n        text: response.textResponse,\n        timestamp: Date.now(),\n        emotion: response.emotion,\n        educationalContent: response.educationalContent\n      };\n      \n      setConversation(prev => [...prev, tomMessage]);\n      \n      // Update learning progress\n      if (response.educationalContent && onLearningProgress) {\n        onLearningProgress({\n          topic: response.educationalContent.topic,\n          objectives: response.educationalContent.learningObjectives,\n          achieved: true\n        });\n      }\n      \n      // Add achievement if significant learning occurred\n      if (response.educationalContent?.learningObjectives.length > 0) {\n        dispatch(addAchievement({\n          id: `learning_${Date.now()}`,\n          title: `Learned about ${response.educationalContent.topic}`,\n          description: `Asked great questions about ${response.educationalContent.topic}`\n        }));\n      }\n      \n      // Update recommendations\n      if (response.followUpSuggestions.length > 0) {\n        dispatch(updateRecommendations({\n          suggestedTopics: response.followUpSuggestions\n        }));\n      }\n      \n      // Add voice synthesis if enabled\n      if (enableVoice && voiceSynthesis.settings.enabled && response.audioResponse) {\n        // Audio would be handled by the voice synthesis system\n      }\n      \n    } catch (error) {\n      console.error('Ask Old Tom error:', error);\n      \n      // Add error message\n      const errorMessage: ConversationMessage = {\n        id: `error_${Date.now()}`,\n        type: 'character',\n        text: \"Oh my, the ocean currents seem a bit choppy right now! Could you try asking me again?\",\n        timestamp: Date.now(),\n        emotion: 'gentle'\n      };\n      \n      setConversation(prev => [...prev, errorMessage]);\n    } finally {\n      setIsAsking(false);\n    }\n  }, [question, isAsking, maxMessages, privacy.consentGiven, childAge, conversationContext.sessionId, emotionalAnalysis.currentEmotion?.primary, conversationContext.previousTopics, learning.difficultyLevel, enableVoice, voiceSynthesis.settings.enabled, onLearningProgress, dispatch]);\n  \n  const handleVoiceToggle = useCallback(async () => {\n    if (!enableVoice) return;\n    \n    if (speechRecognition.listening) {\n      await dispatch(stopSpeechRecognition()).unwrap();\n    } else {\n      await dispatch(startSpeechRecognition('learning')).unwrap();\n    }\n  }, [enableVoice, speechRecognition.listening, dispatch]);\n  \n  const handleSuggestionClick = useCallback((suggestion: string) => {\n    setQuestion(suggestion);\n    inputRef.current?.focus();\n  }, []);\n  \n  const handleKeyPress = useCallback((event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleAskQuestion();\n    }\n  }, [handleAskQuestion]);\n  \n  return (\n    <Box\n      sx={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        maxWidth: 800,\n        mx: 'auto',\n        p: 2,\n      }}\n    >\n      {/* Header with Old Tom Character */}\n      <Paper\n        elevation={2}\n        sx={{\n          p: 3,\n          mb: 2,\n          background: 'linear-gradient(135deg, rgba(21, 101, 192, 0.05), rgba(2, 119, 189, 0.1))',\n          border: '1px solid rgba(21, 101, 192, 0.1)',\n          borderRadius: 3,\n          textAlign: 'center'\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2, mb: 2 }}>\n          <AIIntegratedCharacter\n            characterId=\"old-tom\"\n            size=\"large\"\n            interactive={false}\n            enableVoice={false}\n            showControls={false}\n            autoInitialize={false}\n          />\n          <Box>\n            <Typography variant=\"h4\" sx={{ color: '#1565C0', fontWeight: 'bold', mb: 1 }}>\n              Ask Old Tom Anything\n            </Typography>\n            <Typography variant=\"body1\" sx={{ color: '#666', maxWidth: 400 }}>\n              I'm here to share ocean wisdom and answer all your curious questions!\n            </Typography>\n          </Box>\n        </Box>\n        \n        {/* Privacy Notice */}\n        {!privacy.consentGiven && (\n          <Alert severity=\"info\" sx={{ mt: 2, fontSize: '0.9rem' }}>\n            üõ°Ô∏è Your privacy is important! Adult permission may be needed for voice features.\n          </Alert>\n        )}\n      </Paper>\n      \n      {/* Welcome Message */}\n      {showWelcome && conversation.length === 0 && (\n        <Fade in timeout={1000}>\n          <Paper\n            elevation={1}\n            sx={{\n              p: 3,\n              mb: 2,\n              background: 'linear-gradient(135deg, rgba(21, 101, 192, 0.1), rgba(135, 206, 235, 0.1))',\n              border: '1px solid rgba(21, 101, 192, 0.2)',\n              borderRadius: 3,\n            }}\n          >\n            <Typography variant=\"h6\" sx={{ color: '#1565C0', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Lightbulb /> Welcome, young explorer!\n            </Typography>\n            <Typography variant=\"body1\" sx={{ mb: 2, lineHeight: 1.6 }}>\n              I'm Old Tom, and I've lived in these waters for over a century! I love sharing stories about the ocean, \n              my friendship with George Davidson, and all the amazing creatures I've met.\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: '#666', fontStyle: 'italic' }}>\n              Ask me anything about marine life, friendship, or ocean adventures!\n            </Typography>\n          </Paper>\n        </Fade>\n      )}\n      \n      {/* Conversation Area */}\n      <Paper\n        elevation={1}\n        sx={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          borderRadius: 3,\n          overflow: 'hidden',\n          minHeight: 300\n        }}\n      >\n        {/* Conversation Messages */}\n        <Box\n          sx={{\n            flex: 1,\n            overflow: 'auto',\n            p: 2,\n            backgroundColor: '#fafafa'\n          }}\n        >\n          <List sx={{ p: 0 }}>\n            {conversation.map((message, index) => (\n              <Slide\n                key={message.id}\n                direction=\"up\"\n                in={true}\n                timeout={300 + index * 100}\n              >\n                <ListItem\n                  sx={{\n                    mb: 2,\n                    p: 0,\n                    flexDirection: 'column',\n                    alignItems: message.type === 'user' ? 'flex-end' : 'flex-start'\n                  }}\n                >\n                  <Paper\n                    elevation={1}\n                    sx={{\n                      p: 2,\n                      maxWidth: '80%',\n                      backgroundColor: message.type === 'user' ? '#E3F2FD' : '#FFF',\n                      borderRadius: 3,\n                      border: message.type === 'user' ? '1px solid #2196F3' : '1px solid #1565C0',\n                      position: 'relative'\n                    }}\n                  >\n                    {/* Message Header */}\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                      {message.type === 'character' && (\n                        <>\n                          <Typography variant=\"subtitle2\" sx={{ color: '#1565C0', fontWeight: 'bold' }}>\n                            üêã Old Tom\n                          </Typography>\n                          {message.emotion && (\n                            <Chip\n                              size=\"small\"\n                              label={message.emotion}\n                              sx={{\n                                fontSize: '0.7rem',\n                                height: 20,\n                                backgroundColor: 'rgba(21, 101, 192, 0.1)',\n                                color: '#1565C0'\n                              }}\n                            />\n                          )}\n                        </>\n                      )}\n                      {message.type === 'user' && (\n                        <Typography variant=\"subtitle2\" sx={{ color: '#2196F3', fontWeight: 'bold' }}>\n                          You üßí\n                        </Typography>\n                      )}\n                    </Box>\n                    \n                    {/* Message Text */}\n                    <Typography\n                      variant=\"body1\"\n                      sx={{\n                        lineHeight: 1.5,\n                        color: message.type === 'user' ? '#1976D2' : '#333'\n                      }}\n                    >\n                      {message.text}\n                    </Typography>\n                    \n                    {/* Educational Content Tags */}\n                    {message.educationalContent && (\n                      <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        <Chip\n                          size=\"small\"\n                          icon={<Star />}\n                          label={message.educationalContent.topic}\n                          sx={{\n                            fontSize: '0.7rem',\n                            backgroundColor: 'rgba(255, 193, 7, 0.1)',\n                            color: '#F57C00'\n                          }}\n                        />\n                        {message.educationalContent.relatedTopics.slice(0, 2).map((topic, idx) => (\n                          <Chip\n                            key={idx}\n                            size=\"small\"\n                            label={topic}\n                            sx={{\n                              fontSize: '0.7rem',\n                              backgroundColor: 'rgba(76, 175, 80, 0.1)',\n                              color: '#388E3C'\n                            }}\n                          />\n                        ))}\n                      </Box>\n                    )}\n                    \n                    {/* Timestamp */}\n                    <Typography\n                      variant=\"caption\"\n                      sx={{\n                        display: 'block',\n                        mt: 1,\n                        color: '#666',\n                        textAlign: message.type === 'user' ? 'right' : 'left'\n                      }}\n                    >\n                      {new Date(message.timestamp).toLocaleTimeString()}\n                    </Typography>\n                  </Paper>\n                </ListItem>\n              </Slide>\n            ))}\n          </List>\n          \n          {/* Loading indicator */}\n          {isAsking && (\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, p: 2 }}>\n              <CircularProgress size={20} />\n              <Typography variant=\"body2\" sx={{ color: '#666', fontStyle: 'italic' }}>\n                Old Tom is thinking about your question...\n              </Typography>\n            </Box>\n          )}\n          \n          <div ref={conversationEndRef} />\n        </Box>\n        \n        {/* Input Area */}\n        <Box\n          sx={{\n            p: 2,\n            backgroundColor: 'white',\n            borderTop: '1px solid #e0e0e0'\n          }}\n        >\n          {/* Suggested Questions */}\n          {showSuggestions && conversation.length === 0 && (\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"subtitle2\" sx={{ mb: 1, color: '#666', display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Lightbulb fontSize=\"small\" /> Try asking:\n              </Typography>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                {suggestedQuestions.slice(0, 4).map((suggestion, index) => (\n                  <Chip\n                    key={index}\n                    label={suggestion}\n                    variant=\"outlined\"\n                    clickable\n                    onClick={() => handleSuggestionClick(suggestion)}\n                    sx={{\n                      fontSize: '0.8rem',\n                      '&:hover': {\n                        backgroundColor: 'rgba(21, 101, 192, 0.1)'\n                      }\n                    }}\n                  />\n                ))}\n              </Box>\n            </Box>\n          )}\n          \n          {/* Question Input */}\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-end' }}>\n            <TextField\n              ref={inputRef}\n              fullWidth\n              multiline\n              maxRows={3}\n              variant=\"outlined\"\n              placeholder=\"Ask Old Tom a question...\"\n              value={question}\n              onChange={(e) => setQuestion(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={isAsking}\n              sx={{\n                '& .MuiOutlinedInput-root': {\n                  borderRadius: 3,\n                }\n              }}\n            />\n            \n            {/* Voice Toggle */}\n            {enableVoice && speechRecognition.supported && (\n              <Tooltip title={speechRecognition.listening ? 'Stop Listening' : 'Start Voice Input'}>\n                <IconButton\n                  onClick={handleVoiceToggle}\n                  disabled={isAsking}\n                  sx={{\n                    backgroundColor: speechRecognition.listening ? '#FF9800' : '#f5f5f5',\n                    color: speechRecognition.listening ? 'white' : '#666',\n                    '&:hover': {\n                      backgroundColor: speechRecognition.listening ? '#F57C00' : '#e0e0e0',\n                    },\n                  }}\n                >\n                  {speechRecognition.listening ? <MicOff /> : <Mic />}\n                </IconButton>\n              </Tooltip>\n            )}\n            \n            {/* Send Button */}\n            <Tooltip title=\"Ask Old Tom\">\n              <span>\n                <IconButton\n                  onClick={() => handleAskQuestion()}\n                  disabled={!question.trim() || isAsking}\n                  sx={{\n                    backgroundColor: '#1565C0',\n                    color: 'white',\n                    '&:hover': {\n                      backgroundColor: '#0D47A1',\n                    },\n                    '&:disabled': {\n                      backgroundColor: '#e0e0e0',\n                      color: '#999'\n                    }\n                  }}\n                >\n                  {isAsking ? <CircularProgress size={24} color=\"inherit\" /> : <Send />}\n                </IconButton>\n              </span>\n            </Tooltip>\n          </Box>\n          \n          {/* Voice Transcript Display */}\n          {speechRecognition.transcript && speechRecognition.listening && (\n            <Box\n              sx={{\n                mt: 1,\n                p: 1,\n                backgroundColor: 'rgba(255, 152, 0, 0.1)',\n                borderRadius: 2,\n                border: '1px solid rgba(255, 152, 0, 0.3)'\n              }}\n            >\n              <Typography variant=\"caption\" sx={{ color: '#F57C00', fontWeight: 500 }}>\n                üé§ Listening: \"{speechRecognition.transcript}\"\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </Paper>\n      \n      {/* Recent Achievements */}\n      {learning.achievements.length > 0 && (\n        <Paper\n          elevation={1}\n          sx={{\n            mt: 2,\n            p: 2,\n            borderRadius: 3,\n            background: 'linear-gradient(135deg, rgba(76, 175, 80, 0.05), rgba(139, 195, 74, 0.1))'\n          }}\n        >\n          <Typography variant=\"subtitle2\" sx={{ mb: 1, color: '#388E3C', display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Star /> Recent Learning Achievements\n          </Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {learning.achievements.slice(-3).map((achievement) => (\n              <Chip\n                key={achievement.id}\n                icon={<Star />}\n                label={achievement.title}\n                size=\"small\"\n                sx={{\n                  backgroundColor: 'rgba(76, 175, 80, 0.1)',\n                  color: '#388E3C',\n                  fontSize: '0.75rem'\n                }}\n              />\n            ))}\n          </Box>\n        </Paper>\n      )}\n    </Box>\n  );\n};\n\nexport default AskOldTomInterface;